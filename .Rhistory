}
)
#this link return information in tab formate (format = tab)
ProteinName_url <- paste0("?query=accession:",ProteinAcc,"&format=tab&columns=",Colnames)
RequestUrl <- paste0(baseUrl , ProteinName_url)
RequestUrl <- URLencode(RequestUrl)
if (Request$status_code == 200){
# parse the information in DataFrame
ProteinDataTable <- tryCatch(read.csv(RequestUrl, header = TRUE, sep = '\t'), error=function(e) NULL)
if (!is.null(ProteinDataTable))
{
ProteinDataTable <- ProteinDataTable[1,]
ProteinInfoParsed <- as.data.frame(ProteinDataTable,row.names = ProteinAcc)
# add Dataframes together if more than one accession
protein_interaction_df <- rbind(protein_interaction_df, ProteinInfoParsed)
print(paste0(ProteinAcc," interactions Fetched.."))
}
}else {
HandleBadRequests(Request$status_code)
}
}
protein_interaction_df <- cbind(ID = rownames(protein_interaction_df),protein_interaction_df)
rownames(protein_interaction_df) <- 1:nrow(protein_interaction_df)
return(protein_interaction_df)
}
getGeneNames <- function(ProteinAccList) {
# baseUrl <- "http://www.uniprot.org/uniprot/"
# Colnames = "genes(PREFERRED)"
# protein_gene_name = data.frame()
# for (ProteinAcc in ProteinAccList)
# {
#   #to see if Request == 200 or not
#   Request <- tryCatch(
#     {
#       GET(paste0(baseUrl , ProteinAcc,".xml") , timeout(10))
#     },error = function(cond)
#     {
#       message("Internet connection problem occurs and the function will return the original error")
#       message(cond)
#     }
#   )
#   #this link return information in tab formate (format = tab)
#   ProteinName_url <- paste0("?query=accession:",ProteinAcc,"&format=tab&columns=",Colnames)
#   RequestUrl <- paste0(baseUrl , ProteinName_url)
#   RequestUrl <- URLencode(RequestUrl)
#   if (Request$status_code == 200){
#     # parse the information in DataFrame
#     ProteinDataTable <- tryCatch(read.csv(RequestUrl, header = TRUE, sep = '\t'), error=function(e) NULL)
#     if (!is.null(ProteinDataTable))
#     {
#       ProteinDataTable <- ProteinDataTable[1,]
#       ProteinInfoParsed <- as.data.frame(ProteinDataTable,row.names = ProteinAcc)
#       # add Dataframes together if more than one accession
#       protein_gene_name <- rbind(protein_gene_name, ProteinInfoParsed)
#       print(paste0(ProteinAcc," name fetched"))
#     }  else
#   {
#     ProteinDataTable <- as.character(ProteinAcc)
#     ProteinInfoParsed <- as.data.frame(ProteinDataTable,row.names = ProteinAcc)
#     print(ProteinInfoParsed)
#     # add Dataframes together if more than one accession
#     protein_gene_name <- rbind(protein_gene_name, ProteinInfoParsed)
#   }
#   }else {
#     HandleBadRequests(Request$status_code)
#       ProteinDataTable <- as.character(ProteinAcc)
#       ProteinInfoParsed <- as.data.frame(ProteinDataTable,row.names = ProteinAcc)
#       # add Dataframes together if more than one accession
#       protein_gene_name <- rbind(protein_gene_name, ProteinInfoParsed)
#   }
# }
# return(protein_gene_name)
protein_gene_name = data.frame()
# print(gene_names)
# gene_names_df <- data.frame(
#   key = gene_names[,1],
#   pair = gene_names[,2]
# )
for (ProteinAcc in ProteinAccList)
{
ProteinDataTable <- as.character(lookup(ProteinAcc, as.data.frame(id_to_name), missing=ProteinAcc))
ProteinInfoParsed <- as.data.frame(ProteinDataTable,row.names = ProteinAcc)
# add Dataframes together if more than one accession
protein_gene_name <- rbind(protein_gene_name, ProteinInfoParsed)
}
return(protein_gene_name)
}
output$prot_int_table <- DT::renderDataTable({
protein_interaction_df <- df_interaction()
protein_gene_name <- df_names()
print(protein_interaction_df)
print("here")
print(class(protein_interaction_df))
if(df_names() == 0)
{
p_int_formatted <- data.frame()
} else {
protein_interaction_df[,1] <- as.character(protein_interaction_df[,1])
p_int_formatted <- data.frame()
count = 0
n = 1
for ( id in protein_interaction_df[,1])
{
count = count + 1
if(!is.null(protein_interaction_df[,2]))
{
a = strsplit(as.character(protein_interaction_df[,2]),"; ")
for(int_with in a[[count]])
{
p_int_row <- data.frame(id = as.character(paste0(as.character(lookup(id, as.data.frame(id_to_name), missing="Not found"))," ( ", id," )")),
Interacts_With = as.character(paste0(as.character(lookup(int_with, as.data.frame(id_to_name), missing="Not found"))," ( ", int_with," )")),
row.names = n)
p_int_formatted <- rbind(p_int_formatted,p_int_row)
n = n + 1
}
}
}
# for(i in 1:nrow(protein_interaction_df))
# {
#     protein_interaction_df[i,1] <- paste0(protein_interaction_df[i,1],
#                               ' (',
#                               protein_gene_name[protein_interaction_df[i,1],1],
#                               ')')
# }
# print(protein_interaction_df)
# colnames(protein_interaction_df)[2] <- "Interacts With"
}
p_int_formatted
})
output$prot_name_table <- DT::renderDataTable({
protein_gene_name <- df_names()
if(protein_gene_name == 0)
{
protein_gene_name <- data.frame()
} else {
protein_gene_name <- cbind(ID = rownames(protein_gene_name),protein_gene_name)
rownames(protein_gene_name) <- 1:nrow(protein_gene_name)
colnames(protein_gene_name)[2] <- "Names"
}
protein_gene_name
})
###################################
###################################
###################################
###################################
###################################
###################################
#########  Gemne Mania  ###########
###################################
###################################
df_genemania <- reactive({
print("running")
if (is.null(input$file_gene)&&is.null(input$text_gene)) {
return(NULL)
}else if(!is.null(input$file_gene)){
parts <- strsplit(input$file_gene$datapath, ".", fixed = TRUE)
type <- parts[[1]][length(parts[[1]])]
type <- tolower(type)
if (type != "csv") {
showModal(modalDialog(
title = "Error",
"Please input a csv file!"
))
return(NULL)
}
gene_names <- read.csv(input$file_gene$datapath)
gene_names <- na.omit(gene_names)
gene_names <- gene_names[!duplicated(gene_names[, 1]), ]
}else{
gene_name<-strsplit(input$text_prot_Int," ")
gene_names <- data.frame(gene_name[[1]][1])
for (x in 2:length(gene_name[[1]])) {
gene_names<-rbind(gene_names,gene_name[[1]][x])
}
print(gene_names)
gene_names <- na.omit(gene_names)
gene_names <- gene_names[!duplicated(gene_names[, 1]), ]
}
return(gene_names)
})
observeEvent(input$genemania_submit, {
hide("help_text_gene_mania")
print("running...")
organism_id <- input$organismID
gene_names <- df_genemania()
base_url <- "http://genemania.org/search/"
url <- paste0(base_url,organism_id)
for ( names in as.character(gene_names) )
{
url <- paste0(url,"/",names)
}
# print(gene_mania_link())
print(url)
gene_mania_link(url)
shinyjs::toggle("hide_link")
})
output$linkCo <- renderUI({
tags$a(href = gene_mania_link(), "here", inline =TRUE)
})
output$help_text_gene_mania <- renderUI({
HTML("
<br>
<br>
<center>
<p>
<b>
This page submits a given gene list to
<a href ='http://genemania.org/'>GeneMania.org</a> to retrieve the Co-expression
</b>
</p>
</center>
")
})
###################################
###################################
###################################
###################################
###################################
###################################
######  Protein Sequences  ########
###################################
###################################
Proteins <- NULL
df_prot_seq <- eventReactive(input$submit_prot_Seq, {
print("running")
if (is.null(input$file_prot_seq)&& is.null(input$text_prot_seq)) {
return(NULL)
}
else if(!is.null(input$file_prot_seq)){
parts <- strsplit(input$file_prot_seq$datapath, ".", fixed = TRUE)
type <- parts[[1]][length(parts[[1]])]
type <- tolower(type)
if (type != "csv") {
showModal(modalDialog(
title = "Error",
"Please input a csv file!"
))
return(NULL)
}
protein_Id <- unique(as.character(na.omit(read.csv(input$file_prot_seq$datapath)[,1])))
Proteins <<- protein_Id
}
else{
Acessions<-strsplit(input$text_prot_seq,",")
if(length(Acessions[[1]])==1){
Acessions<-strsplit(input$text_prot_seq," ")
}
Proteins <- data.frame(Acessions[[1]][1])
for (x in 2:length(Acessions[[1]])) {
Proteins<-rbind(Proteins,Acessions[[1]][x])
}
print(Proteins)
Proteins <- na.omit(Proteins)
Proteins <- Proteins[!duplicated(Proteins[, 1]), ]
}
shinyjs::show("downloadData")
return(Proteins)
})
Seqdata <- NULL
output$help_text_prot_seq <- renderUI({
HTML("<br>
<br>
<center>
<p>
<b>This page retrieves the full protein sequences from <a href ='https://www.uniprot.org/'>UniProt.org</a> of a given set of UniProt accessions, Please upload accessions to start analysis.
</b>
</p>
</center>
")
})
output$help_text_prot_seq_evol <- renderUI({
HTML("<br>
<br>
<center>
<p>
<b>
This page performs Evolutionary analysis of protein sequences retrieved from <a href ='https://www.uniprot.org/'>UniProt.org</a>, Please upload accessions to start analysis.
</b>
</p>
</center>
")
})
output$help_text_prot_seq_Patho <- renderUI({
HTML("
<br>
<br>
<center>
<p>
<b>
This page retrieves protein's pathological information from <a href ='https://www.uniprot.org/'>UniProt.org</a> of a given set of UniProt accessions, Please upload accessions to start analysis.
</b>
</p>
</center>
")
})
output$SequencePlot <- renderPlot(
{
if (!is.null(df_prot_seq()))
{
hide("help_text_prot_seq")
if(is.null(Seqdata))
{
Proteins <- df_prot_seq()
Seqdata <<- GetSequences(Proteins)
}
PlotPhysicochemical(Seqdata)
}
}
)
output$GravyPlot <- renderPlot({
if (!is.null(df_prot_seq()))
{
hide("help_text_prot_seq")
if(is.null(Seqdata))
{
Proteins <- df_prot_seq()
Seqdata <<- GetSequences(Proteins)
}
PlotGravy(Seqdata)
}
})
output$ChargePlot <- renderPlot({
if (!is.null(df_prot_seq()))
{
hide("help_text_prot_seq")
if(is.null(Seqdata))
{
Proteins <- df_prot_seq()
Seqdata <<- GetSequences(Proteins)
}
PlotCharge(Seqdata)
}
})
output$AcidityPlot <- renderPlot({
if (!is.null(df_prot_seq()))
{
hide("help_text_prot_seq")
if(is.null(Seqdata))
{
Proteins <- df_prot_seq()
Seqdata <<- GetSequences(Proteins)
}
PlotAcidity(Seqdata)
}
})
output$downloadData <- downloadHandler(
filename = function() {
paste0("Sequences", ".FASTA")
},
content = function(file) {
Accessions <- df_prot_seq()
for (Acc in Accessions)
{
Request <- tryCatch(
{
GET(paste0("https://www.uniprot.org/uniprot/" , Acc , ".Fasta") , timeout(10))
},error = function(cond)
{
message("Internet connection problem occurs and the function will return the original error")
message(cond)
}
)
if (Request$status_code == 200)
{
OutNumber <<- OutNumber + 1
Fastadata <- read.csv(paste0("https://www.uniprot.org/uniprot/" , Acc , ".Fasta") , header = F , sep = "\t")
Sequences <- paste0(as.character(unlist(Fastadata)) , collapse = "\n")
write.table(x = Sequences , file = paste0(FileName ,".fasta") , quote = F , row.names = F , col.names = F, append = T)
}
}
}
)
##################################
######## protein revolution ######
df_prot_seq_evol <- eventReactive(input$submit_prot_seq_evol,{
print("running")
if (is.null(input$file_prot_seq_evol)&& is.null(input$text_prot_seq_evol)) {
return(NULL)
}
else if(!is.null(input$file_prot_seq_evol)){
parts <- strsplit(input$file_prot_seq_evol$datapath, ".", fixed = TRUE)
type <- parts[[1]][length(parts[[1]])]
type <- tolower(type)
if (type != "csv") {
showModal(modalDialog(
title = "Error",
"Please input a csv file!"
))
return(NULL)
}
protein_Id <- unique(as.character(na.omit(read.csv(input$file_prot_seq_evol$datapath)[,1])))
Proteins <- protein_Id
}
else{
Acessions<-strsplit(input$text_prot_seq_evol,",")
if(length(Acessions[[1]])==1){
Acessions<-strsplit(input$text_prot_seq_evol," ")
}
Proteins <- data.frame(Acessions[[1]][1])
for (x in 2:length(Acessions[[1]])) {
Proteins<-rbind(Proteins,Acessions[[1]][x])
}
print(Proteins)
Proteins <- na.omit(Proteins)
Proteins <- Proteins[!duplicated(Proteins[, 1]), ]
}
return(Proteins)
})
GenesObj <- NULL
output$GenePlot <- renderRadialNetwork(
{
if (!is.null(df_prot_seq_evol()))
{
if (is.null(GenesObj))
{
Proteins <- df_prot_seq_evol()
GenesObj <- GetNamesTaxa(Proteins)
}
ConstructGenes(GenesObj)
}
}
)
output$Chromo <- renderPlot(
if (!is.null(df_prot_seq_evol()))
{
if(is.null(GenesObj))
{
Proteins <- df_prot_seq_evol()
GenesObj <- GetNamesTaxa(Proteins)
}
PlotChromosomeInfo(GenesObj)
}
)
output$Phylogenetic <- renderPlot(
{
if(!is.null(df_prot_seq_evol()))
if(is.null(Seqdata))
{
Proteins <- df_prot_seq_evol()
Seqdata <<- GetSequences(Proteins)
}
ConstructPhylogeny(Seqdata)
}
)
###################################
###################################
###################################
###################################
#Pathogens
df_prot_seq_Patho <- eventReactive(input$submit_prot_seq_Patho,{
print("running")
if (is.null(input$file_prot_seq_Patho)&& is.null(input$text_prot_seq_Patho)) {
return(NULL)
}
else if(!is.null(input$file_prot_seq_Patho)){
parts <- strsplit(input$file_prot_seq_Patho$datapath, ".", fixed = TRUE)
type <- parts[[1]][length(parts[[1]])]
type <- tolower(type)
if (type != "csv") {
showModal(modalDialog(
title = "Error",
"Please input a csv file!"
))
return(NULL)
}
protein_Id <- unique(as.character(na.omit(read.csv(input$file_prot_seq_Patho$datapath)[,1])))
Proteins <- protein_Id
}
else{
Acessions<-strsplit(input$text_prot_seq_Patho,",")
if(length(Acessions[[1]])==1){
Acessions<-strsplit(input$text_prot_seq_Patho," ")
}
Proteins <- data.frame(Acessions[[1]][1])
for (x in 2:length(Acessions[[1]])) {
Proteins<-rbind(Proteins,Acessions[[1]][x])
}
print(Proteins)
Proteins <- na.omit(Proteins)
Proteins <- Proteins[!duplicated(Proteins[, 1]), ]
}
return(Proteins)
})
Pathodata <- NULL
DiseaseTable <- NULL
output$DisaeseTable <- renderDataTable({
if(!is.null(df_prot_seq_Patho()))
{
Proteins <- df_prot_seq_Patho()
Pathodata <- GetPathology_Biotech(Proteins)
DiseaseTable <- Get.diseases(Pathodata)
}
}, escape = F)
output$DiseasePlot <- renderBubbles({
if(!is.null(df_prot_seq_Patho()))
{
if(!is.null(DiseaseTable))
{
Plot.NDiseases(DiseaseTable)
}
else {
Proteins <- df_prot_seq_Patho()
Pathodata <- GetPathology_Biotech(Proteins)
DiseaseTable <- Get.diseases(Pathodata)
Plot.NDiseases(DiseaseTable)
}
}
})
# session$onSessionEnded(stopApp)
}
app <- shinyApp(ui = ui, server = server)
app
